// nome do pipeline
def pipeline_name = params.PIPELINE_NAME ?: 'jenkins-pipeline'

//configurações da aplicação
def base_image= (params.APP_NAME) ?: 'demo-app'
def project= params.PROJECT_NAME ?: 'pipeline-test'
def docker_registry= params.DOCKER_REGISTRY ?: 'docker-registry.default.svc:5000'
def route_name= params.ROUTE_NAME ?: "route-${pipeline_name.toLowerCase()}"


def application_properties_mount_path = params.MOUNT_PATH ?: '/opt/apl'
def prometheus_actuator_port = params.PROMETHEUS_ACTUATOR_PORT ?: '8080'
def prometheus_actuator_path = params.PROMETHEUS_ACTUATOR_PATH ?: '/actuator/prometheus'


//parâmetros default para autoscale
def as_min_pods= params.AS_MIN_PODS ?: 1
def as_max_pods= params.AS_MAX_PODS ?: 10
def as_cpu_threshold= params.AS_CPU_THRESHOLD ?: 20

//parâmetros default para load balancer
def new_app_weight= params.NEW_APP_WEIGHT ?: 100
def old_app_weight= params.OLD_APP_WEIGHT ?: 0

//parâmetros default para health check
def health_url= params.HEALTH_URL ?: 'http://'
def health_port= params.HEALTH_PORT ?: 8080
def health_delay= params.HEALTH_DELAY ?: 20
def health_path= params.HEALTH_PATH ?: 'actuator'

//repositório onde irá buscar o arquivo de configuração do configmap
def repo_url= params.SOURCE_REPOSITORY_URL ?: 'git@gitcorp.local:yagi/DemoOpenshift.git'
def branch= params.SOURCE_REPOSITORY_REF ?: 'demo'
def folder= params.CONTEXT_DIR ?: 'src/main/resources/'
def repo_secret= params.SOURCE_SECRET ?: 'gitlab'

//image base
def source_image= params.IMAGE_BASE ?: 'openshift/openjdk18-openshift:latest'

def route_url="${base_image}-${project}.apps.example.local"

def change_number = params.CHANGE_NUMBER ?: 'C1234'

pipeline {
    agent any
    stages {
        stage('build') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        def bcExists = openshift.selector("bc","${base_image}").exists()
                        if (!bcExists) {
                            sh (script: "oc -n ${project} new-build ${source_image}~${repo_url}#${branch} --source-secret=${repo_secret}  --name '${base_image}' --to='${docker_registry}/${base_image}:v1' --labels='app=${base_image}'")
                            sh (script: "oc -n ${project} annotate bc/${base_image}  created-by=\'Pipeline ${pipeline_name} (change #${change_number})\' --overwrite")
                            env.NEW_BUILD = 'v1'
                        } else {
                            def last_build = sh (script: "oc -n ${project} get bc '${base_image}' --no-headers -o go-template --template='{{.status.lastVersion}}'", returnStdout: true).trim()
                            env.LAST_BUILD = 'v' + last_build
                            last_build = last_build.toInteger() + 1
                            env.NEW_BUILD = 'v' + last_build
                            sh (script: "oc -n ${project} patch bc ${base_image} -p \'{\"spec\": {\"output\": {\"to\": {\"name\": \"${base_image}:${env.NEW_BUILD}\" }}}}\'")
                            sh (script: "oc -n ${project} start-build ${base_image}")
                            sh (script: "oc -n ${project} annotate build ${base_image}-${last_build} created-by=\'Pipeline ${pipeline_name} (change #${change_number})\' --overwrite")
                        }
                    }
                }
            }
        }  //stage('build')

        stage('waiting build') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        def last_build = sh (script: "oc -n ${project} get bc '${base_image}' --no-headers -o go-template --template='{{.status.lastVersion}}'", returnStdout: true).trim()
                        timeout(10) {
                            waitUntil {
                                def build_status = sh (script: "oc -n ${project} get build '${base_image}-${last_build}' --no-headers --template='{{.status.phase}}' -o=go-template",returnStdout: true).trim()
                                return (build_status == "Complete");
                            }
                        }
                    }
                }
            }
        } //stage('waiting build')

        stage('Clone Repo') {
            steps{
                dir("fontes") {
                    checkout([$class: 'GitSCM', branches: [[name: "${branch}"]], reference: [["${folder}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout']], gitTool: '${gitInit}',submoduleCfg: [], userRemoteConfigs: [[url: "${repo_url}",credentialsId: "${project}-${repo_secret}"]] ])
                }
            }
        } //stage('Clone Repo')

        stage('configMap') {
            steps{
                script {
                    dir("fontes") {
                        openshift.withProject("${project}") {
                            def cmExists = openshift.selector("cm","${base_image}-${env.NEW_BUILD}").exists()
                            if (!cmExists) {
                                sh (script: "oc -n ${project} create configmap ${base_image}-${env.NEW_BUILD} --from-file=src/main/resources/application.properties")
                                sh (script: "oc -n ${project} patch cm ${base_image}-${env.NEW_BUILD} -p \'{\"metadata\": {\"labels\": {\"app\": \"${base_image}-${env.NEW_BUILD}\"}}}\'")
                                sh (script: "oc -n ${project} annotate cm ${base_image}-${env.NEW_BUILD}  created-by=\'Pipeline ${pipeline_name} (change #${change_number})\' --overwrite")
                            }
                        }
                    }
                }
            }
        } // stage('configMap')

        stage('createApp') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        def dcExists = openshift.selector("dc","${base_image}-${env.NEW_BUILD}").exists()
                        if (!dcExists) {
                            try {
                                openshift.newApp("${openshift.project()}/${base_image}:${env.NEW_BUILD} --name=${base_image}-${env.NEW_BUILD}")
                                sh "oc -n ${project} set volume dc/${base_image}-${env.NEW_BUILD} --configmap-name=${base_image}-${env.NEW_BUILD} --add --mount-path=${application_properties_mount_path}"
                                sh "oc -n ${project} set env dc/${base_image}-${env.NEW_BUILD} JAVA_OPTS=-Dspring.config.location=${application_properties_mount_path}/application.properties"
                                sh (script: "oc -n ${project} annotate dc ${base_image}-${env.NEW_BUILD} created-by=\'Pipeline ${pipeline_name} (change #${change_number})\' --overwrite")
                            } catch(exc) {
                                // se não conseguir criar o app, remove o cm para não ficar lixo
                                sh (script: "oc -n ${project} delete configmap ${base_image}-${env.NEW_BUILD}")
                                throw exc
                            } finally {
                                def isExists = openshift.selector("is","${base_image}-${env.NEW_BUILD}").exists()
                                if (isExists) {
                                    sh "oc -n ${project} delete is ${base_image}-${env.NEW_BUILD}"
                                }
                            }
                        }
                    }
                }
            }
        } // stage('createApp')

        stage('configPrometheusAnnotations') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        def config_prom = sh(script: "oc -n ${project} get dc ${base_image}-${env.NEW_BUILD} -o template --template=\'{{index .metadata.annotations \"prometheus.io/port\"}}\'", returnStdout: true).trim()
                        if (config_prom && config_prom != prometheus_actuator_port) {
                            // Deployment Config
                            sh (script: "oc -n ${project} patch dc ${base_image}-${env.NEW_BUILD} -p \'{\"metadata\": {\"annotations\": {\"prometheus.io/path\": \"${prometheus_actuator_path}\", \"prometheus.io/port\": \"${prometheus_actuator_port}\", \"prometheus.io/scrape\": \"true\"}}}\'")

                            // Service
                            sh (script: "oc -n ${project} patch service ${base_image}-${env.NEW_BUILD} -p \'{\"metadata\": {\"annotations\": {\"prometheus.io/path\": \"${prometheus_actuator_path}\", \"prometheus.io/port\": \"${prometheus_actuator_port}\", \"prometheus.io/scrape\": \"true\"}}}\'")
                            sh (script: "oc -n ${project} annotate service ${base_image}-${env.NEW_BUILD} created-by=\'Pipeline ${pipeline_name} (change #${change_number})\' --overwrite")
                        }
                    }
                }
            }
        } // stage('configPrometheusAnnotations')

        stage('configHealthCheck') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        sh "oc -n ${project} set probe dc/${base_image}-${env.NEW_BUILD} --readiness --liveness --get-url=${health_url}:${health_port}/${health_path} --initial-delay-seconds=${health_delay}"
                    }
                }
            }
        } // stage('configHealthCheck')

        //Espera até que o pod esteja ready para evitar falhas nos testes
        stage('wait until pod deployment') {
            steps {
                script {
                    timeout(5) {
                        waitUntil {
                            def replicas = sh (script:"oc -n ${project} get dc ${base_image}-${env.NEW_BUILD} -o go-template --template='{{.status.replicas}}'", returnStdout: true).trim()
                            def ready_replicas = sh (script:"oc -n ${project} get dc ${base_image}-${env.NEW_BUILD} -o go-template --template='{{.status.readyReplicas}}'", returnStdout: true).trim()
                            echo "${replicas}  ${ready_replicas}"
                            return (replicas == ready_replicas);
                        }
                    }
                }
            }
        } // stage('wait until pod deployment')

        stage('updateRoute') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        def serviceExists1 = openshift.selector("svc","${base_image}-${env.NEW_BUILD}").exists()
                        def serviceExists2 = openshift.selector("svc","${base_image}-${env.LAST_BUILD}").exists()
                        def routeExists = openshift.selector("route","${route_name}").exists()
                        if (routeExists) {
                            sh "oc -n ${project} delete route ${route_name}"
                        }
                        sh "oc -n ${project} expose svc/${base_image}-${env.NEW_BUILD} --name=${route_name} --hostname=${route_url}"
                        sh "oc -n ${project} annotate route/${route_name} haproxy.router.openshift.io/disable_cookies=true --overwrite"
                        sh "oc -n ${project} annotate route/${route_name} haproxy.router.openshift.io/balance=roundrobin --overwrite"
                        sh (script: "oc -n ${project} annotate route ${route_name} created-by=\'Pipeline ${pipeline_name} (change #${change_number})\' --overwrite")
                        if (serviceExists1 && serviceExists2) {
                            sh "oc -n ${project} set route-backends ${route_name} ${base_image}-${env.NEW_BUILD}=${new_app_weight} ${base_image}-${env.LAST_BUILD}=${old_app_weight}"
                        }
                    }
                }
            }
        } // stage('updateRoute')

        stage('hpa') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        def hpaExists = openshift.selector("hpa","${base_image}-${env.NEW_BUILD}").exists()
                        if (!hpaExists) {
                            sh (script: "oc -n ${project} autoscale dc/${base_image}-${env.NEW_BUILD} --min ${as_min_pods} --max ${as_max_pods} --cpu-percent=${as_cpu_threshold}")
                            sh (script: "oc -n ${project} patch hpa ${base_image}-${env.NEW_BUILD} -p \'{\"metadata\": {\"labels\": {\"app\": \"${base_image}-${env.NEW_BUILD}\"}}}\'")
                            sh (script: "oc -n ${project} annotate hpa ${base_image}-${env.NEW_BUILD} created-by=\'Pipeline ${pipeline_name} (change #${change_number})\' --overwrite")
                        }
                    }
                }
            }
        } // stage('hpa')

        // remove hpa
        // scale dc replicas to 0
        stage('disable old dcs') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        // get the last - 2 version of deployment config
                        def older_build = env.NEW_BUILD.substring(1).toInteger() - 2
                        def hpaExists = openshift.selector("hpa","${base_image}-v${older_build}").exists()
                        def dcExists = openshift.selector("dc","${base_image}-v${older_build}").exists()
                        if (hpaExists && dcExists) {
                            sh (script: "oc -n ${project} delete hpa ${base_image}-v${older_build}")
                            sh (script: "oc -n ${project} scale --replicas=0 dc ${base_image}-v${older_build}")
                            sh (script: "oc -n ${project} patch dc ${base_image}-v${older_build} -p \'{\"metadata\": {\"annotations\": {\"disabled-by\": \"Pipeline ${pipeline_name} (change #${change_number})\"}}}\'")
                        }
                    }
                }
            }
        } //disable old dcs

        stage('tests') {
            steps {
                script {
                    timeout(time: 10, unit: "MINUTES") {
                        def robot = input(message: 'Do robot tests?', ok: 'Proceed',
                            parameters: [booleanParam(defaultValue: true,
                            description: 'Execute robot tests?',name: 'Yes?')])
                        if (robot) {
                            echo "Running robot tests ..."
                            env.ROBOT=true
                        }
                    }
                }
            }
        } // stage('tests')

        stage('testRobot1') {
            steps {
                script {
                    if(env.ROBOT) {
                        try{
                            sh "java -jar robotframework-3.1.1.jar  --log demo1_log.html --output demo1.xml  --report demo1_report.html teste.robot"
                        } catch(exc) {
                            openshift.withProject("${project}") {
                                def serviceExists1 = openshift.selector("svc","${base_image}-${env.NEW_BUILD}").exists()
                                def serviceExists2 = openshift.selector("svc","${base_image}-${env.LAST_BUILD}").exists()
                                if (serviceExists1 && serviceExists2) {
                                    def update_new_app_weight = new_app_weight - 10
                                    def update_old_app_weight = old_app_weight + 10
                                    sh "oc -n ${project} set route-backends ${route_name} ${base_image}-${env.NEW_BUILD}=${update_new_app_weight} ${base_image}-${env.LAST_BUILD}=${update_old_app_weight}"
                                }
                            }
                            throw exc
                        } finally {
                            step([$class: 'RobotPublisher',
                                outputPath: '.',
                                outputFileName: "*.xml",
                                reportFileName: "demo1_report.html",
                                logFileName: "demo1_log.html",
                                passThreshold: 100.0,
                                unstableThreshold: 0,
                                otherFiles: ""])
                        }
                    }
                }
            }
        } // stage('testRobot1')

        stage('updateRouteAfterTest1') {
            steps {
                script {
                    if(env.ROBOT) {
                        openshift.withProject("${project}") {
                            def serviceExists1 = openshift.selector("svc","${base_image}-${env.NEW_BUILD}").exists()
                            def serviceExists2 = openshift.selector("svc","${base_image}-${env.LAST_BUILD}").exists()
                            if (serviceExists1 && serviceExists2) {
                                def update_new_app_weight = new_app_weight + 10
                                def update_old_app_weight = old_app_weight - 10
                                sh "oc -n ${project} set route-backends ${route_name} ${base_image}-${env.NEW_BUILD}=50 ${base_image}-${env.LAST_BUILD}=50"
                            }
                        }
                    }
                }
            }
        } // stage('updateRouteAfterTest1')

        stage('promote?') {
            steps {
                script {
                    timeout(time: 10, unit: "MINUTES") {
                        def promote = input(message: 'Promote to homolog?', ok: 'Proceed',
                        parameters: [booleanParam(defaultValue: true,
                            description: 'Promote?',name: 'Yes?')])
                        if (promote) {
                            echo "Promoting ..."
                            env.PROMOTE=true
                        }
                    }
                }
            }
        } // stage('promote?')

        stage('promoting') {
            steps {
                script {
                    openshift.withProject("${project}") {
                        if (env.PROMOTE){
                            def user = sh(script: "oc whoami", returnStdout: true).trim()
                            echo "${user}"
                            def token = sh (script: "oc whoami -t", returnStdout: true).trim()

                            // nome do pipeline
                            def pipeline_project = 'pipeline-test'
                            def src_image = 'dev/demo:v3'
                            def dst_image = 'homolog/demo:v3'
                            def promotion_project = 'homolog'
                            def openshift_url = 'console.ocp.example.local:443'
                            def promotion_pipeline_name = 'pipeline'
                            def app_name = 'demo'
                            def change = 'C1234'

                            def annotation = params.ANNOTATION ?: "Pipepper_${pipeline_name}_(change_#${change})"
                            def hook_env = params.HOOK_ENV ?: "{\"name\":\"NEW_CONTAINER_IMAGE_TAG\",\"value\":\"${env.NEW_BUILD}\"},{\"name\":\"OLD_CONTAINER_IMAGE_TAG\",\"value\":\"${env.LAST_BUILD}\"},{\"name\":\"PROMOTION_PROJECT\",\"value\":\"${promotion_project}\"},{\"name\":\"PIPELINE\",\"value\":\"${promotion_pipeline_name}\"},{\"name\":\"APP_NAME\",\"value\":\"${app_name}\"},{\"name\":\"CHANGE\",\"value\":\"${change}\"}"

                            sh (script: "curl -k -H 'Content-Type: application/json' -H \"Authorization: Bearer ${token}\" -X POST \"https://${openshift_url}/apis/build.openshift.io/v1/namespaces/${pipeline_project}/buildconfigs/${promotion_pipeline_name}/instantiate\" -d \'{ \"kind\":\"BuildRequest\", \"apiVersion\":\"build.openshift.io/v1\", \"metadata\":{\"name\":\"${promotion_pipeline_name}\",\"creationTimestamp\":null} ,\"env\":[${hook_env}],\"triggeredBy\":[{\"message\":\"${annotation}\"}],\"dockerStrategyOptions\":{}, \"sourceStrategyOptions\":{}}\'")
                        }
                    }
                }
            }
        } // stage('promoting')

    } // stages
} // pipeline
